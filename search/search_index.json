{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-design-ex-machina","title":"Welcome to Design Ex Machina","text":"<p>Design Ex Machina is a thesis project for the Bachelor in Design at the Faculty of Design and Art at the Free University of Bolzano. After researching classic programming and artificial intelligence applications to the design field in order to understand innovative design workflows, great attention was given to teaching methodologies in the field. This research took then the shape of a handbook and two workshops with high-school and university design students and finally of this website, in order to share the results of the research with as many people as possible. This project aims to be a manual that not only greatly enrich and simplify designers workflows, but that also fights disinformation and misconceptions on Artificial Intelligence in the design community.</p>"},{"location":"#the-project","title":"The Project","text":"<p>Every designer has been in the position of doing a task that was far too repetitive, and ended up wondering how they could have simplified and speeded up the process. Then again, as John Frazer precociously put it in 1995, one might have found themselves in \u201cdistorting the design process to fit the limitations of the most available program\u201d, and this manual provides exactly the means to overcome these limitations and, in a certain way, to revolutionarise the whole workflow.</p> <p>This ambitious aim will be achieved through teaching some basic knowledge on the importance of algorithms in our work, mainly in two form: programming and artificial intelligence. This manual doesn't claim to be able to teach everything on creative coding or how an image generating model works, but it can explain to everyone just enough to be more autonomous and to have a better grasp of the everchanging world we live in.</p> <p>At first, we will learn about the basics of p5js programming, a sort of simplified design-focused version of JavaScript, then elements of about how machine learning works. Finally, these tools will be compared and merged in order to learn how to write code well beyond our capabilities, while still understanding what is happening in front of you. This manual won't magically make you a professional computer scientist and it does not aim to do so, but still, knowing how to program and how do these tools work will make it easier to work with one.</p> <p>Furthermore, and this may be the most important gain from this manual, it will grant independence and speed to any designer.</p>"},{"location":"#how-to-use-this-manual","title":"How to use this manual","text":"<p>It's not required to follow the section order we propose and it's completely possible to approach single chapters alone, anyway it would still be advisable to do so if you aim to follow the whole manual. If instead you come here already with some knowledge, it </p>"},{"location":"00intro/","title":"Introdction","text":"<p>As we've established, coding and artificial intelligence are becoming unavoidable in our work. Looking at the bigger picture, it might also be aruged that Information Technology is unavoidable in any field. If we can't fight this and we can't fight change, how can we embrace it? As already mentioned before, in this website we will delve into this topic with a major focus on creative coding and generative artificial intelligence, particularly using p5.js paired with OpenAI's ChatGPT as a coding aid, but also introducing image generation AI concepts, by giving ideas and hints for its use and a bit of technical information in order to spread awareness and knowledge.</p> <p>The choice of p5.js is mainly due to being open-source and its accessibility, as any project can be run on the web editor without needing to download anything. ChatGPT isn't open-source, but even though paid subscription is available, it still garantees a free use that is perfectly suitable for our needs. While on image generation, examples will be presented both with DrawThings AI, a free tool for MacOS and iOS, but also with *Midjourney**, a paid subscription for all operating systems and platforms.</p> <p>Before even beginning to put our hands into work, it's good to ask ourselves something: if both computational graphics and generative artificial intelligence can \"create\" images, why should we prefer one over each other? A good rule of thumb can be that any time you can do something with classic algorithms, it's better than to use machine learning ones. But let's take a step back, what even is an algorithm?</p>"},{"location":"00intro/#algorithms","title":"Algorithms","text":"<p>Simply put, an algorithm is a set of rigorous instructions to be followed in problem solving. In our case, the problem is usually the display of a graphic or, for example, how to manage a specific interaction. They also are the very foundation of machine learning, which is a way for computers to learn from given data and improve overtime without needing specific programming for every task. For a more specific explanation you can check the Blablabus section.</p> <p>A very common example for basic algorithmic thinking is the recipe example: when cooking a new recipe we follow specific instructions and steps, and if we follow them perfectly we end up getting a delicious perfect dish. In a similar way, algorithms are instructions we give to the computer in order to perform specific task and obtain specific results. </p> <p>It can be understood by taking the example of cooking a new recipe. To cook a new recipe, one reads the instructions and steps and executes them one by one, in the given sequence. The result thus obtained is the new dish is cooked perfectly. Every time you use your phone, computer, laptop, or calculator you are using Algorithms. Similarly, algorithms help to do a task in programming to get the expected output. When it comes to programming, even in our relatively simple applications we need to develop algorithmic thinking, which means being able to think in a systematic and structured way, just as we need to do when programming or solving problems. To do so, there are many different approaches that are quite useful: for example decomposition, which envolves breaking down a problem into smaller and thus more manageable parts, but also pattern recognition, which means trying to identify trends within a problem in order to make it easier to solve it. Finally, we will need to develop a series of ordered steps to solve the problem. </p>"},{"location":"00intro/#merging-generative-ai-and-computational-graphics","title":"Merging Generative AI and Computational Graphics","text":"<p>So, what are we actually going to do and how is this manual going to be structured? Once we will have learned the basics of p5.js programming we will then will delve into the two main modes of generative today: text-to-text and text-to-image. In the first case we will use tools like ChatGPT for helping us into programming beyond our capabilities or for being more efficient, looking first at the basics of how this technology works, and then how to use them best for our goals. Regarding text-to-image we will also see a bit of theory behind it and then some examples of ways to tailor them for our goals, as well as use ideas. Another useful thing we will look into is how AI generated images often feel \"soulless\" or how they fail to recreate precise effects (for example pixelation or authentic halftones) and how to overcome this issues with further editing through p5.js.</p>"},{"location":"01gettingStarted/","title":"Getting Started","text":""},{"location":"01gettingStarted/#getting-started","title":"Getting Started","text":""},{"location":"01gettingStarted/#what-is-programming","title":"What is programming?","text":"<p>Programming is the action of giving a computer a set of instructions in the form of code, which follows a precise syntax based on the language we\u2019re using, which in our case will be JavaScript. Humans communicate with each other through natural language, like English or Italian, which allows some interpretation in it, even though we don\u2019t notice that. For example, \u201cPut the book on the table in the bedroom\u201d, that could either mean \u201cMove the book from the table to the bedroom\u201d or \u201cMove the book on the table that is in the bedroom\u201d and we as humans are able to understand what the sentence means based on the context. A computer is not able to do that, we must always explain to it exactly what it needs to do through a programming language.</p> <p>Before dealing with JavaScript and what does it mean to tell the computer what to do, it might be useful to understand the concepts and reasonings of a program without needing to deal with the constraints and difficulties of an actual programming language. This is usually done by writing pseudocode, a text that is somewhat in between natural and programming languages. There aren\u2019t fixated rules on how you should write it, as its purpose is to understand what we are going to do with our program before even turning on the computer. However, this doesn\u2019t mean that it shouldn\u2019t be clear, see it as a tool to plan the logic of your program without thinking about syntax. Let\u2019s say for example that we want to make a hamburger. Our set of instructions in pseudocode might look like this:</p> <pre><code>put bread\nput burger\nput cheese\nput tomatoes\nput bread\n</code></pre> <p>At the same time, if we wanted to write pseudocode for creating a rectangle with a circle perfectly fitting inside of it, we might write the following:</p> <pre><code>draw square\ndraw circle, diameter = side of the square\n</code></pre> <p>This is perfectly fine, but we might also decide that we want to have more data already in our pseudocode. So, if we decide that our square is 400 pixels wide, we could also say:</p> <pre><code>num = 400\ndraw square with side of num\ndraw circle with diameter of num\n</code></pre> <p>It still is pretty easy to understand. It is advisable to always plan out our coding in pseudocode before starting to write on a computer, as it allows us to think of the instructions to give to the program without also thinking of how should it be written.</p> <p>Exercises</p> <ol> <li>Fill a grid with black and white tiles, alternating colors. Tip: Change the color based on odd or even numbers.</li> <li>Make a row of 10 circles that are each bigger of 10 px Tip: Repeat 10 times the creation of a circle and its radius increase</li> <li>In a row of 9 shapes, color every third one red, and the rest gray. Tip: Check every time if the circle number is dividable by 3</li> <li>Create a diagonal line of squares going down and to the right. Tip: Increase both the x and y position equally each time.</li> </ol> <p>History Bit</p> <p>When we program, we\u2019re not actually \u201ctalking\u201d the \u201ccomputer language\u201d, we\u2019re using a language that is still somewhat understandable by human beings. This is then \u201ctranslated\u201d into a machine readable language, consisting on the binary (the famous zeros and ones that make up computers) instructions which will tell the computer what to do. In the late 1800s programming meant to turn on and off actual levers, i.e. changing zeros to ones and vice versa, which allowed to make simple calculations. In the 40s, the first programming languages emerged, but they were still not very easy to understand by humans. Over time, programming languages evolved to be more understandable by humans. These are \u201chigh-level languages\u201d as they need a higher level of \u201ctranslation\u201d to be understood by the computer, as opposed to \u201clow-level\u201d languages, which need little translation to machine readable code.</p>"},{"location":"01gettingStarted/#javascript-and-p5js","title":"JavaScript and p5.js","text":"<p>As mentioned in the introduction, this manual will use to p5.js (referred from here just as p5), an open source JavaScript library for creative coding. What does this mean? A library is a collection of resources used by a program to implement functions without having to manually implement them. In other words, it\u2019s like a toolbox with a series of tools that you can use to build a program faster and without knowing exactly how is it working. However, p5.js is particularly handy not only because of its design dedicated tools, but also because it works in a way that strongly simplifies the JavaScript language, making it even easier to use. Because of this reason, beware if you decide to use your new knowledge and skill to write scripts for Adobe Photoshop and InDesign, since you wouldn't use JavaScript for creating visuals but rather for automating tasks, which needs a different set of \"commands\" than the ones we are learning here. Don't be too preoccupied though, you will find that the knowledge you have will still give you a solid advantage.</p> <p>Compared to humans, computers are not as bright as us, and what may seem obvious to us, it is not to them. For example, for us CreateCanvas and createCanvas are virtually the same, but unfortunately, they are completely different statements for our computer and our programming language. This is because languages like JavaScript are case sensitive, which mean that a capitalized letter is not the same as a lower case one.</p> <p>Usually any library comes with a documentation, which explains what every function does and how to use it. It is a crucial resource to help you implement programs, as on p5 website they are not only explained, but everything comes with a series of examples. P5 does not only that, it also offers a web-based interface to allow you to immediately start coding without needing to download anything, you just need to visit editor.p5js.org in order to start working. This will be our workspace throughout the book, let\u2019s take a look.</p> <p></p> <p>At the top of the screen, we find two simple buttons that allow us to play or stop our program. On the left side we find the main code editor which displays by default the sketch.js file. Below the code editor, there's the console where messages or error feedbacks will appear. This is going to be extremely useful when troubleshooting our programs. Finally, on the right side of the screen there's the preview area, where the output of the code will be run and be interacted with.</p> <p>History Bit</p> <p>In 2001, Casey Reas and Ben Fry developed the Processing language (also known as p5), which was based on Java, at the time one of the most immediate way to have graphical content on the internet. Since then, JavaScript became the dominant language of the web, which prompted John Resig in 2007 to \u201ctranslate\u201d Processing to JavaScript (which, despite the name, doesn\u2019t share anything with Java), calling it Processing.js. However, it based itself on the original Processing, which meant you still had to go through some processes to get your Processing.js projects on the web. That\u2019s when p5.js made its advent, as it is in fact a reimagined version of Processing specifically based on JavaScript, which allows to follow JavaScript syntax and simplified application on the web.</p> <p>We can immediately see that by default p5 has some code written in it, it\u2019s time to understand the basics of what our programs are going to be made of. Any p5 code will have a variable number of functions in it, but the very least is two, exactly like the ones we\u2019re looking at. A function is like a command that our code is going to execute, which can be more or less complex. In our sample code, we have the <code>setup</code> and the <code>draw</code> functions, the very basics of a p5 program. The <code>setup</code> function runs once at the beginning usually setting up our canvas, while the <code>draw</code> function runs repeatedly, like animation frames. Any function is like a container with a set of more in depth instructions in it, and to tell the program when do the instructions of the given function start and end we use curly brackets.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n}\n</code></pre> <p>If we try to run it, a simple gray square will appear on the side of the screen. What has happened? The instruction, called call, in the setup function was <code>createCanvas(400, 400)</code>, where <code>createCanvas</code> is the name of the command and the numbers inside the parentheses are the settings of our command. Almost every command in p5 will be followed by parentheses, which are filled with the precise settings, which are called arguments, that we need to give it. When we see (or write) nothing inside the parentheses it\u2019s because we\u2019re okay with the default settings it has, which are not shown. Attention though, not every function is able to work without explicit parameters. For example, <code>createCanvas</code> needs as parameters a width and height to function properly, if we just write <code>createCanvas()</code> the command will take as width and height 0, which means it will create a 0x0 px canvas, therefore a useless one. In our sample code both the height and width are defined to be 400, which explains the reason why our canvas is a square. Why the gray though? The second function of the program is draw, which contains a simple statement: <code>background(220)</code>. It\u2019s telling the computer to draw the program with a specific color, and it can take different kinds of parameters. If we only write one number, we will be using a shade of gray, while if we write three numbers, those will be RGB values. In our case we only have a number as an argument, which means it\u2019s taking 220 as the grayscale value for the background, this explains the gray color of the square.</p> <p>Summary</p> <p>Function: a command, it contains a series of instructions in the form of calls.  Call: specific instruction to be executed.  Argument: specific settings of a command, contained in circle brackets. </p> <p>Let\u2019s try and make this more interesting. First, let's setup our background just after creating the canvas, without having to re-draw it at every frame. What to do now in the draw function? Try to run this code and to pass your mouse on the canvas:</p> <p>What do you think is going on? At every frame a circle is being drawn. In p5, a circle requires three parameters: the X and Y coordinates of the center and its radius. In our case, we are giving as the first two parameters the mouse X and Y coordinate and a radius of 30. As the call is being run in the draw function, at every frame our program checks where our mouse is and it draws a circle of radius 30 with the position of the mouse as its center. You can try to change the parameters in the various calls to see how that changes the looks of your canvas!</p> <p>A white circle with a black outline can be be a bit boring. How can we change that? We need to tell the program how will the circle look like before actually drawing it. To do so, we will need to implement two new calls. The first one is <code>fill()</code>, which will define what color the fill of the circle, or any shape we are drawing, is going to be. This is done exactly like the background color, which means that a single digit will be translated in a grayscale value, while three digits will be translated in an RGB value. For example, <code>fill(0, 0, 255)</code> will set our circles to be blue. To change the outline color instead, we will use the <code>stroke()</code> call, which needs the same kind of parameter as the fill and background calls. What about the stroke width? The call we need now is <code>strokeWeight()</code>, which takes as parameter a digit that stands for the pixel width of the stroke.</p> <p>What about the other shapes though? Another useful shape is a rectangle. Similarly to the color parameters, the amount of data we give to it will change the way the program understands what he has to do. The most immediate way to implement the <code>rect()</code> call is to give it 4 basic parameters: the top left corner coordinates and then width and height, for example: <code>rect(20, 50, 100, 150)</code> will create a rectangle with its top left corner at the coordinates 20, 50 and which has a width of 100 and a height of 150.</p> <p>When programming it might be rather useful to give a name to a certain value, in order to use it more times in our code without needing to repeat the value over and over. Imagine this as putting the number inside a labeled box - for example \u201ccircles amount\u201d. When you need that number, instead of writing it every time, you just refer to it through its label \u201ccircles amount\u201d. This also makes it easy to update the value later by just changing the number in the box. These \u201cboxes\u201d are called variables, which we can either just declare, i.e. create the box without putting anything in it, or initialize, which means also assigning it a value. To do this in p5 we use a very simple syntax: <code>let variableName = value</code>.</p> <pre><code>//declare without initializing\nlet circleAmount;\n\n//initialize a declared variable\ncircleAmount = 3; \n\n//declare and initialize\nlet squareAmount = 5;\n</code></pre> <p>Remember to declare a variable before initializing it, otherwise you will get an error from the editor. </p> <p>Useful Calls</p> <p>Note that <code>x</code> or <code>y</code> followed by a point informations means the parameter is the x coordinate of that point.</p> <p><code>ellipse(xCenter, yCenter, width, height)</code> <code>arc(xCenter, yCenter, width, height)</code> <code>line(xFirstPoint, yFirstPoint, xSecondPoint, ySecondPoint)</code> <code>point(x, y)</code> <code>square(xCorner, yCorner, sideLength)</code> <code>triangle(x1Corner, y1Corner, x2Corner, y2Corner, x3Corner, y3Corner)</code> </p> <p>Before delving into some exercises to understand better these concepts, it\u2019s worth mentioning a key part of programming: comments. If you decide to share your work with a friend or a coworker, or even if you open a program after a while, all the code you wrote may appear very hard to understand. To avoid this issue, it\u2019s useful to write comments that might help us remember what a function or a line did, in order to avoid confusion and simplify the working process. To do these we just need to write <code>//</code> at the beginning of a comment: these two simple characters will tell p5 to ignore everything that comes after them. This way you can keep track of your work on the javascript file itself. Attention though, as we shouldn't comment everything we write, but just what might be unclear or that might be useful to explain better. </p> <pre><code>//draws rectangle\nrect(500, 400, 200, 300);\n\n//text background rectangle\nrect(500, 400, 200, 300);\n</code></pre> <p>Rarely we will also need to write code in between a line, to do that we will use <code>/*</code> at the beginning of the comment and <code>*/</code> at the end, this way javascript will know exactly what part to ignore.</p> <p>Now that we know these functions, calls and a few useful parameters, such as <code>mouseX</code> and <code>mouseY</code>, we can already start to have some fun.</p> <p>Exercises</p> <ol> <li>Write a code to draw circles with their center on the center of the canvas, and whose size is determined by the position of the mouse in the Y coordinates.  Tip: Use width/2, height/2 instead of manually calculating the values. This way, the code will work even if you change the canvas dimensions.</li> <li>Write a code that produces the diagonals of a given canvas.  Tip: There are many ways to do this, the simplest is to write two <code>line()</code> calls</li> <li>Write a code where 4 lines, departing each from one of the corners of the canvas, converge on the mouse position. The mouse can go anywhere and the 4 lines will always converge onto it.  You could either have redraw the lines at every frame or have them move without trail. This depends on where you write a key line of code. What line is it and what is happening?</li> <li>Using the same logic, draw lines from the center of the canvas to the mouse position.</li> <li>Mirror the mouse movement to create circles across the canvas center.  Tip: the mirrored point should be the height (or width) minus the mouse position</li> </ol> <p>Now that we know the very basics of p5 programming, it might be interesting to see how to implement some \u201csettings\u201d you\u2019re used from classic software, like changing the opacity of a shape or integrating typography directly from p5. This can be useful as it gives us freedom of applying these options, without being limited by the software.</p>"},{"location":"01gettingStarted/#transparency","title":"Transparency","text":"<p>We will now look at how to handle transparency and blend modes in our p5 projects, concepts with which designers should already have some familiarity.</p> <p>In p5, just like many design and illustration softwares, transparency is called alpha and it is not linked to the shape, but the color of the object. Its value ranges from 0 to 255 and it can be set through the <code>setAlpha()</code> call. This means that if we have a circle called c1 we cannot change its alpha value directly, but instead we have to declare a color variable and change its alpha value. Remember to repeat the <code>fill()</code> call, otherwise p5 will fill the new circle with the old version of the color if you already used it. Let\u2019s have a look directly.</p> <p>Just as we're used doing with programs like Adobe Photoshop, but also Procreate or other Adobe programs, opacity is not the only way to change how our shapes look when in front of other parts of the canvas: we can also use blend modes. To use them we will implement the call <code>blendmode()</code>, which asks as a parameter the name of the mode. These names are mostly the same as the ones we find in common image editing tools.</p> <p>Blend Modes</p> <p>Here are the main modes we can use:</p> <p><code>ADD</code>: color values from the source are added to values from the canvas.  <code>DARKEST</code>: keeps darkest color value.  <code>LIGHTEST</code>: keeps lightest color value.  <code>MULTIPLY</code>: color values from the source are multiplied with values from the canvas. The result is always darker.  <code>SCREEN</code>: all color values are inverted, then multiplied, then inverted again. The result is always lighter. (Opposite of <code>MULTIPLY</code>)  <code>DIFFERENCE</code>: color values from the source are subtracted from the values from the canvas. If the difference is a negative number, it's made positive.  <code>OVERLAY</code>: combines <code>MULTIPLY</code> and <code>SCREEN</code>. Dark values in the canvas get darker and light values get lighter.  <code>HARD_LIGHT</code>: combines <code>MULTIPLY</code> and <code>SCREEN</code>. Dark values in the source get darker and light values get lighter.  <code>SOFT_LIGHT</code>: a softer version of <code>HARD_LIGHT</code>. </p>"},{"location":"01gettingStarted/#adding-typography-to-the-canvas","title":"Adding Typography to the Canvas","text":"<p>As typography is its own precise and important practice this section of the chapter aims to only explain how to render a designer\u2019s own knowledge on the topic in a javascript canvas, but does not in any way aim to explain typography concepts to the learner. Because of this, many typographic concepts will be given for granted and only the ways for those concepts to be implemented will be hereby explained.</p> <p>The simplest way to add typography to a canvas is to use the <code>text()</code> call, which requires three minimum parameters: the text to be written and then the x and y coordinates of the text\u2019s bottom left corner. As with the shape calls we\u2019ve seen so far, both <code>fill()</code> and <code>stroke()</code> are used for styling our text and they will respectively change the text color and its outline. By default, the text size is 12, but we can change it with a simple <code>textSize()</code> call, in which the only parameter is the desired size in points.</p> <p>Technically speaking, the text parameter is called a string, which can also be declared and initialized as a variable, just like we did with numbers. For example:</p> <p>As you can see, we declare a string by surrounding it with <code>\u2018\u2019</code> characters. Note that you can also choose to use <code>\"\"</code> and it will be exactly the same. The second string we declared has a weird \\n in between two words. What do these strange characters do? If we tried to place this in a text and run our program we will see that <code>\\n</code> created a new line. What we\u2019re looking at is an escape sequence, i.e. a sequence of characters used to write a special character in our string, that if we were to write normally it would somehow disrupt our code. In this case, creating a new line by pressing enter would only be confusing for both us and our JavaScript interpreter. </p> <p>Escape Sequences and Useful Calls</p> <p>Common escape sequences:</p> <p><code>\\t</code> = tab <code>\\n</code> = new line <code>\\\u2019</code> = \u2018 <code>\\\u201d</code> = \u201c</p> <p>Useful calls:</p> <p><code>textStyle(style)</code> \u2013 Sets the style for system fonts with NORMAL, ITALIC, BOLD and BOLDITALIC. <code>loadFont(path)</code> \u2013 Loads a font and creates a p5 font object. <code>textFont(font, [size])</code> \u2013 Sets the font used, the second optional parameter is the size.</p>"},{"location":"01gettingStarted/#handling-images","title":"Handling Images","text":"<p>As a designer, it\u2019s likely that you will decide to work with images in your projects, and you might be wondering how to handle them in p5. As with almost any other thing we saw until now, images will be handled through a series of calls. Before doing that, we need to have an image in our files in the first place. We can do that by pressing the arrow on the upper left corner of the editor to open the sketch files window, and then pressing plus, finally \u201cUpload File. Now that we have our image ready, we can start working with it.  Furthermore, just as we saw with values and strings, images are objects in p5 (and in many other programming languages), and as such they can be handled through variables created with the <code>let</code> keyword. As we\u2019ve seen before, we can either declare our object variable without immediately assigning it or not. To assign an image to our object we will be using the <code>loadImage()</code> call, which requires a string with the image path as a parameter. Usually all \u201cload\u201d calls for loading assets are used in a special kind of function: <code>preload()</code> which will be called before <code>`setup()</code> and <code>draw()</code>.</p> <p>Now that we have our image ready it\u2019s time to actually create a canvas with it. To do so we will have to first create a canvas with the same size as the image. To do so, we will need to call the image size in the parameters of <code>createCanvas()</code> through the dot operator. In many programming languages we can use the dot operator to call an object data, for example the length of a string or the width of an image, like in our case. Finally, we will need to draw our image by using the simple call <code>image()</code> which requires as parameters the image we are going to use and the coordinates of the top left corner, which in our case is 0, 0.</p> <p>This is how our program will look like now:</p> <pre><code>function preload(){\n    let img = loadImage(\u2018example.txt\u2019);\n}\n\nfunction setup(){\n    createCanvas(img.width, img.height);\n    image (img, 0, 0);\n}\n</code></pre> <p>If we wanted to easily resize our image and canvas, we might want to use the fourth and fifth unnecessary parameters of the <code>image()</code> call: the bottom right corner coordinates. For example we might edit our code this way:</p> <pre><code>function preload(){\n    let img = loadImage(\u2018example.txt\u2019);\n}\n\nfunction setup(){\n    createCanvas(img.width/3, img.height/3);\n    image (img, 0, 0, width, height);\n}\n</code></pre> <p>Exercises</p> <ol> <li> <p>Write pseudocode to draw a traffic light with red, yellow, and green lights in the correct order vertically.  Tip: Think of shapes, positions, and repetition.</p> </li> <li> <p>Modify the sample p5.js sketch to create a canvas of size 600x300 and set the background to light gray and try to realise the traffic light in p5.  Tip: Use <code>circle()</code> function.</p> </li> </ol>"},{"location":"02interaction/","title":"Interaction","text":""},{"location":"02interaction/#mouse-interaction","title":"Mouse Interaction","text":"<p>Blo</p>"},{"location":"03loopsConds/","title":"Loops and Conditionals","text":"<p>Now that we have the basics clear, it\u2019s time to delve into two of the most important concepts in programming: loops and conditionals. Despite the intimidating name, it\u2019s nothing to be too scared of. It\u2019s impossible to stress enough how important these concepts are, both for classic programming algorithms, but also for the creations of pattern, something many designers will be interested about.</p> <p>Before delving into the topic, let's look at operations. They are basic actions we can perform both in simple mathematics and with computers, where the two most obvious ones are <code>+</code> and <code>-</code>, which are unsurprisingly \"add\" and \"subtract\". We then have <code>*</code> for multiplications and <code>/</code> for divisions, but here comes a twist. Just as in elementary school we learnt about the remainder of a division, we also have in programming a way to compute it: the remainder operation <code>%</code>. This operation computes the remainder of a division, so for example if we calculated \"13/3\" p5 would round the result to 4, while \"13%3\" would output \"1\", since \"4*3\" is 12 and \"13-12\" is 1. Finally, let's look at something quite strange at first: </p> <p>How can position be equal to itself plus one? As we saw in the last section, \"position\" is a variable that holds a value and writing <code>position = position + 1</code> is a way to update that value. Therefore, if initially position equals to 20, after the operation it will equal to \"20 + 1\". Since, as we've seen, the <code>draw()</code> function reruns at every frame, the circle will be redrawn at its new position every frame, therefore creating our simple animation. This increase operation is very useful in programming, especially in loops, just as we will see now. </p>"},{"location":"03loopsConds/#loops","title":"Loops","text":"<p>Loops are a fundamental concept in programming, as they allow a program to repeat an action while or until a specific condition is met. The condition might be a target result (for example filling the whole canvas) or simply repeating an action a set number of times.</p> <p>Let\u2019s say we want to create a chain of 20 circles. In pseudocode it might look like this:</p> <pre><code>repeat 20 times:\n    draw a circle of 40 px diameter every 30 px\n</code></pre> <p>How can we translate this simple concept into real code that is executable? One of the most common ways is by using a structure called for-loop. It allows to repeat an action while a condition is valid, so for example we can use it to repeat an action a certain number of times by using a counter, a variable that keeps track of the amount of times the action has been repeated.</p> <pre><code>for (/*condition goes here */){\n    //action goes here\n  }\n</code></pre> <p>In the action we will use calls and commands that we already encountered before, but the condition part might look a bit tricky. This is where our counter, usually named i, comes into play. In the cursive brackets we will need to declare the counter variable, define until which condition will the loop be repeated and finally increment our counter. This is how a typical for loop condition looks like:</p> <pre><code>for (let i = 0; i &lt; 20; i++){\n    //action goes here\n  }\n</code></pre> <p>Here we declared the counter variable with the number 0, instructed the computer to repeat the action until its value is less than 20, and finally increased the counter value by 1. Note we increased the value by using the increment (<code>++</code>) operator, a special operator in JavaScript that is logically equivalent to writing <code>i = i + 1</code>. Note that it's also possible to have a decrement (<code>--</code>) operation. This way our counter will begin from 0, increment by 1 at the end of the block (i.e. the <code>}</code> bracket) and then check whether the counter is minor than 20. If it is, the block will run again, otherwise it will skip it and continue with our code.</p> <p>So how would our chain pattern code look like in p5? </p> <p>Now, in your p5 programs it's very likeable you will need to loop through the whole canvas, and in this case a simple loop won't be enough, as you will require coordinates both for the x and the y. How to handle this case? Let's look at the code:</p> <pre><code>for (let x = 0; x &lt; 4; x++) {\n  for (let y = 0; y &lt; 4; y++) {\n\n  }\n}\n</code></pre> <p>What is going on? The program enters in the first loop, then runs the second one until it doesn't meet anymore the condition (i.e. being less than nine), then goes back to the first loop in order to increment the x value and then it runs the second loop. This repeats until the first loop condition is valid. If this sounds a bit too confusing, let's look at it.</p>"},{"location":"03loopsConds/#conditionals","title":"Conditionals","text":"<p>Conditionals are another fundamental concept in programming, as they allow the computer to executer different actions depending on whether a condition is true or false.</p> <p>Thanks to this structure, we can make our program perform a certain action only if a certain circumstance apply. For example we can take our initial code that created circles wherever our mouse was and make it so that the moment our mouse goes into the bottom half of the canvas, all the circles will be red. In pseudocode, our logic would look like this:</p> <pre><code>draw a red circle where the mouse is\n\nif the mouse is in the bottom half:\n    fill is blue\n</code></pre> <p>The basic syntax is the same as the for loops we\u2019ve seen in the last section:</p> <pre><code>if (condition){\n    //action\n  }\n</code></pre> <p>However, the key difference is in how we will write our condition. Usually the condition will be a value comparison, for example in our case checking whether the mouseY is higher than half the canvas height.</p> <pre><code>if (mouseX &gt; height/2){\n    //action\n  }\n</code></pre> <p>This is usually called an \u201cif statement\u201d and is extremely common practice in programming. Let\u2019s now assume that we want for all the circles in the top half to be red and the circles in the bottom half to be blue. How would we deal with it? Since there is no other option than for the mouse to be in the bottom half, we don\u2019t need to explicitly explain the other condition, and we might just write our logic in pseudocode like this:</p> <pre><code>if the mouse is in the top half:\n        fill is red\n\n    otherwise:\n        fill is blue\n\n    draw a circle where the mouse is\n</code></pre> <p>But how do we write the \u201cotherwise\u201d part? This is called an \u201cif else statement\u201d and the syntax is very simple, as following:</p> <pre><code>if (/*condition*/){\n    //action\n  } else {\n    //action\n}\n</code></pre> <p>So this is how our code will finally look like:</p> <p>In this program we defined an action for our program to do in the eventuality that the if condition didn\u2019t apply, and we did it through the \u201celse\u201d statement. However, what if we didn\u2019t have just two conditions but more? For example that our circles assumed a different color based on the third of the canvas the mouse found itself in?</p> <pre><code>if mouse is in the top third:\n        fill is red\n\n    if mouse is in the mid third:\n        fill is green\n\n    otherwise:\n        fill is blue\n\n    draw a circle where the mouse is\n</code></pre> <p>Even though this might look complex at first, the basic logic is the same as the one we saw before, we just need one last piece of syntax: else if. This is how our conditional statement will look like::</p> <pre><code>//top third\nif (mouseY &gt; (height/3)*2) {\n    fill(200, 0, 0);\n    } else if (mouseY &lt; (height/3)*2 &amp;&amp; mouseY&gt; height/3 ) {\n        //mid third\n        fill (0, 0, 200)\n        } else {\n            //bottom third\n            fill(0, 200, 0);\n        }\n</code></pre> <p>You might have noticed that something is looking strange here. What is happening in the fourth line? We are here handling not one, but two conditions: in this example two criteria must be met. In our case we wanted to fill the circles in green only if the mouse Y coordinate was both less than two thirds and more than one third.</p> <p>This kind of situation requires us to introduce two new symbols: <code>&amp;&amp;</code> and <code>||</code>. In plain English, the first one can be read as \u201cAND\u201d, it means that both conditions must be true for the action to be performed. The second one is instead \"OR\u201d, which means that at least one of the two condition must be true in order for the program to perform the action. So let's look at this truth table and see a little bit better how this logic works.</p> x y AND OR true true true true true false false true false true false true false false false false <p>Finally, let's look at our complete code.</p> <p>Exercises</p> <ol> <li>Draw triangles in a row. Change the color of a triangle when the mouse is over it.</li> <li>Draw a 5x5 grid of squares.     2.1. Try to alternate the square colors like in a chessboard         Tip: Use nested loops.</li> </ol> <ol> <li></li> <li>Starting from the 02A program from this chapter, make every second circle filled with red.         Tip: Use the remainder operation</li> </ol>"},{"location":"04integratingAI/","title":"Integrating Artificial Intelligence","text":""},{"location":"04integratingAI/#why-and-how-to-integrate-ai","title":"Why and how to integrate AI?","text":"<p>As already mentioned in the previous section, we will n</p>"}]}